//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"time"
)

func Addition(a, b int) int {
	duration := time.Duration(rand.Intn(1000) * int(time.Millisecond))
	fmt.Printf("added %v, %v in %vms\n", a, b, duration)
	return a + b
}

func main() {
	results := make(chan int, 10)
	sum := 0

	for i := 0; i < 10; i++ {
		go func() {
			results <- Addition(rand.Intn(10), rand.Intn(10))
		}()
	}
	for i := 0; i < 10; i++ {
		sum += <-results
	}
	fmt.Printf("\nSum: %d", sum)
}
